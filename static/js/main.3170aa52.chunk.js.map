{"version":3,"sources":["App.module.css","components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","ContactForm","onSubmit","this","props","handleSubmit","type","name","pattern","title","required","onChange","handleChange","value","state","number","className","s","btn","Component","Filter","ContactList","contacts","filter","onDeleteBtn","cont","toLowerCase","includes","map","contact","id","ContactListBtn","onClick","App","e","currentTarget","setState","preventDefault","find","alert","uuidv4","prevState","nativeEvent","path","contactsOfLocalStorage","localStorage","getItem","contactOfLocStorParsedJSON","JSON","parse","prevProps","setItem","stringify","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3170aa52.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1pD1O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ContactForm_btn__2WaQz\"};","import { Component } from 'react/cjs/react.production.min';\nimport s from './ContactForm.module.css';\nclass ContactForm extends Component {\n  render() {\n    return (\n      <form onSubmit={this.props.handleSubmit}>\n        <label>\n          Name <br />\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.props.handleChange}\n            value={this.props.state.name}\n          />\n        </label>\n        <br />\n        <label>\n          Number <br />\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={this.props.handleChange}\n            value={this.props.state.number}\n          />\n        </label>\n        <br />\n        <button className={s.btn} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import { Component } from 'react/cjs/react.production.min';\n\nclass Filter extends Component {\n  render() {\n    return (\n      <label>\n        Find contact by name\n        <br />\n        <input type=\"text\" name=\"filter\" onChange={this.props.handleChange} />\n      </label>\n    );\n  }\n}\n\nexport default Filter;\n","import { Component } from 'react/cjs/react.production.min';\nimport s from './ContactList.module.css';\nimport PropTypes from 'prop-types';\n\nclass ContactList extends Component {\n  render() {\n    const { contacts, filter, onDeleteBtn } = this.props;\n    return (\n      <ul className={s.ContactList}>\n        {contacts\n          .filter(cont =>\n            cont.name.toLowerCase().includes(filter.toLowerCase()),\n          )\n          .map(contact => (\n            <li key={contact.id} id={contact.id}>\n              {contact.name}: {contact.number}\n              <button className={s.ContactListBtn} onClick={onDeleteBtn}>\n                delete\n              </button>\n            </li>\n          ))}\n      </ul>\n    );\n  }\n}\n\nexport default ContactList;\n\nContactList.propTypes = {\n  filter: PropTypes.string,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n};\n","import React, { Component } from 'react';\n\nimport s from './App.module.css';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-3', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    name: '',\n    number: '',\n    filter: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    if (\n      this.state.contacts.find(\n        contact => contact.name.toLowerCase() === this.state.name.toLowerCase(),\n      )\n    )\n      return alert(`${this.state.name} is already in contacts.`);\n\n    this.setState({\n      contacts: [\n        {\n          id: uuidv4(),\n          name: this.state.name,\n          number: this.state.number,\n        },\n        ...this.state.contacts,\n      ],\n      name: '',\n      number: '',\n    });\n  };\n\n  onDeleteBtn = e => {\n    this.setState(prevState => {\n      return {\n        contacts: [\n          ...prevState.contacts.filter(\n            cont => cont.id !== e.nativeEvent.path[1].id,\n          ),\n        ],\n      };\n    });\n  };\n\n  // // // // // // // сохранение в localeStorage\n\n  componentDidMount() {\n    // console.log('App conponentDidMount()');\n\n    const contactsOfLocalStorage = localStorage.getItem('contacts');\n    const contactOfLocStorParsedJSON = JSON.parse(contactsOfLocalStorage);\n    // console.log(contactOfLocStorParsedJSON);\n\n    if (contactOfLocStorParsedJSON) {\n      this.setState({\n        contacts: contactOfLocStorParsedJSON,\n      });\n    }\n  }\n\n  // позволяет сравнивать состояние до и посля обновения\n  componentDidUpdate(prevProps, prevState) {\n    // console.log('App componentDidUpdate');\n    // console.log(prevProps);\n    // console.log(prevState);\n    // console.log(this.state);\n\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    // console.log('App render');\n    return (\n      <div className={s.App}>\n        <h1>Phonebook</h1>\n        <ContactForm\n          state={this.state}\n          handleSubmit={this.handleSubmit}\n          handleChange={this.handleChange}\n        />\n\n        {this.state.contacts.length > 0 && (\n          <>\n            <h2>Contacts</h2>\n            {this.state.contacts.length > 1 && (\n              <Filter handleChange={this.handleChange} />\n            )}\n\n            <ContactList\n              contacts={this.state.contacts}\n              filter={this.state.filter}\n              onDeleteBtn={this.onDeleteBtn}\n            />\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__1tukT\",\"ContactListBtn\":\"ContactList_ContactListBtn__PMCUA\"};"],"sourceRoot":""}